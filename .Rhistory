View(DT)
DT[, mean(V3), by=.(activity,subject) ]
DT[, .(mean(V3), mean(v4)), by=.(activity,subject) ]
DT[, .(mean(V3), mean(V4)), by=.(activity,subject) ]
DT[, mean, by=.(activity,subject) ]
DT[, list(), by=.(activity,subject) ]
DT[, list(DTnames), by=.(activity,subject) ]
list(DTnames)
list(DTnames[3:length(DTnames)])
DT[, list(DTnames[3:length(DTnames)]), by=.(activity,subject) ]
DT[, mean(list(DTnames[3:length(DTnames)])), by=.(activity,subject) ]
list(DTnames[3:length(DTnames)])
paste("mean(",list(DTnames[3:length(DTnames)])),")" sep="")
paste("mean(",   list(DTnames[3:length(DTnames)]),")", sep="")
DT[,    .(mean(V3)
, mean(V4)
, mean(V5)
), by=.(activity,subject) ]
DT[,    .(BodyAcc_Xmean =mean(V3)
, mean(V4)
, mean(V5)
), by=.(activity,subject) ]
, BodyAcc_Zmean =mean(V5)
View(selectdata)
View(DT)
DTnames
View(subject_test)
originalcolnames
ftf <- data.frame(originalcolnames)
View(ftf)
DT[,    .(BodyAcc_Xmean =mean(V3)
, BodyAcc_Ymean =mean(V4)
, BodyAcc_Zmean =mean(V5)
, BodyAcc_Xstdmean =mean(V6)
, BodyAcc_Ystdmean =mean(V7)
, BodyAcc_Zstdmean =mean(V8)
, GravityAcc_Xmean =mean(V9)
, GravityAcc_Ymean =mean(V10)
, GravityAcc_Zmean =mean(V11)
, GravityAcc_Xstdmean =mean(V12)
, GravityAcc_Ystdmean =mean(V13)
, GravityAcc_Zstdmean =mean(V14)
, BodyAccJerk_Xmean =mean(V15)
, BodyAccJerk_Ymean =mean(V16)
, BodyAccJerk_Zmean =mean(V17)
, BodyAccJerk_Xstdmean =mean(V18)
, BodyAccJerk_Ystdmean =mean(V19)
, BodyAccJerk_Zstdmean =mean(V20)
, BodyGyro_Xmean =mean(V21)
, BodyGyro_Ymean =mean(V22)
, BodyGyro_Zmean =mean(V23)
, BodyGyro_Xstdmean =mean(V24)
, BodyGyro_Ystdmean =mean(V25)
, BodyGyro_Zstdmean =mean(V26)
, BodyGyroJerk_Xmean =mean(V27)
, BodyGyroJerk_Ymean =mean(V28)
, BodyGyroJerk_Zmean =mean(V29)
, BodyGyroJerk_Xstdmean =mean(V30)
, BodyGyroJerk_Ystdmean =mean(V31)
, BodyGyroJerk_Zstdmean =mean(V32)
, BodyAccMag_mean =mean(V33)
, BodyAccMag_stdmean =mean(V34)
, GravityAccMag_mean =mean(V35)
, GravityAccMag_stdmean =mean(V36)
, BodyAccJerkMag_mean =mean(V37)
, BodyAccJerkMag_stdmean =mean(V38)
, BodyGyroMag_mean =mean(V39)
, BodyGyroMag_stdmean =mean(V40)
, BodyGyroJerkMag_mean =mean(V41)
, BodyGyroJerkMag_stdmean =mean(V42)
, fBodyAcc_Xmean =mean(V43)
, fBodyAcc_Ymean =mean(V44)
, fBodyAcc_Zmean =mean(V45)
, fBodyAcc_Xstdmean =mean(V46)
, fBodyAcc_Ystdmean =mean(V47)
, fBodyAcc_Zstdmean =mean(V48)
, fBodyAccJerk_Xmean =mean(v49)
, fBodyAccJerk_Ymean =mean(v50)
, fBodyAccJerk_Zmean =mean(v51)
, fBodyAccJerk_Xstdmean = mean(V52)
, fBodyAccJerk_Ystdmean = mean(V53)
, fBodyAccJerk_Zstdmean = mean(V54)
, fBodyGyro_Xmean = mean(V55)
, fBodyGyro_Ymean = mean(V56)
, fBodyGyro_Zmean = mean(V57)
, fBodyGyro_Xstdmean = mean(V58)
, fBodyGyro_Ystdmean = mean(V59)
, fBodyGyro_Zstdmean = mean(V60)
, fBodyAccMag_mean =mean(V61)
, fBodyAccMag_stdmean =mean(V62)
, fBodyBodyAccJerkMag_mean =mean(V63)
, fBodyBodyAccJerkMag_stdmean =mean(V64)
, fBodyBodyGyroMag_mean =mean(V65)
, fBodyBodyGyroMag_stdmean =mean(V66)
, fBodyBodyGyroJerkMag_mean =mean(V67)
, fBodyBodyGyroJerkMag_stdmean =mean(V68)
),
by=.(activity,subject) ]
DT[,    .(BodyAcc_Xmean =mean(V3)
, BodyAcc_Ymean =mean(V4)
, BodyAcc_Zmean =mean(V5)
, BodyAcc_Xstdmean =mean(V6)
, BodyAcc_Ystdmean =mean(V7)
, BodyAcc_Zstdmean =mean(V8)
, GravityAcc_Xmean =mean(V9)
, GravityAcc_Ymean =mean(V10)
, GravityAcc_Zmean =mean(V11)
, GravityAcc_Xstdmean =mean(V12)
, GravityAcc_Ystdmean =mean(V13)
, GravityAcc_Zstdmean =mean(V14)
, BodyAccJerk_Xmean =mean(V15)
, BodyAccJerk_Ymean =mean(V16)
, BodyAccJerk_Zmean =mean(V17)
, BodyAccJerk_Xstdmean =mean(V18)
, BodyAccJerk_Ystdmean =mean(V19)
, BodyAccJerk_Zstdmean =mean(V20)
, BodyGyro_Xmean =mean(V21)
, BodyGyro_Ymean =mean(V22)
, BodyGyro_Zmean =mean(V23)
, BodyGyro_Xstdmean =mean(V24)
, BodyGyro_Ystdmean =mean(V25)
, BodyGyro_Zstdmean =mean(V26)
, BodyGyroJerk_Xmean =mean(V27)
, BodyGyroJerk_Ymean =mean(V28)
, BodyGyroJerk_Zmean =mean(V29)
, BodyGyroJerk_Xstdmean =mean(V30)
, BodyGyroJerk_Ystdmean =mean(V31)
, BodyGyroJerk_Zstdmean =mean(V32)
, BodyAccMag_mean =mean(V33)
, BodyAccMag_stdmean =mean(V34)
, GravityAccMag_mean =mean(V35)
, GravityAccMag_stdmean =mean(V36)
, BodyAccJerkMag_mean =mean(V37)
, BodyAccJerkMag_stdmean =mean(V38)
, BodyGyroMag_mean =mean(V39)
, BodyGyroMag_stdmean =mean(V40)
, BodyGyroJerkMag_mean =mean(V41)
, BodyGyroJerkMag_stdmean =mean(V42)
, fBodyAcc_Xmean =mean(V43)
, fBodyAcc_Ymean =mean(V44)
, fBodyAcc_Zmean =mean(V45)
, fBodyAcc_Xstdmean =mean(V46)
, fBodyAcc_Ystdmean =mean(V47)
, fBodyAcc_Zstdmean =mean(V48)
, fBodyAccJerk_Xmean =mean(V49)
, fBodyAccJerk_Ymean =mean(V50)
, fBodyAccJerk_Zmean =mean(V51)
, fBodyAccJerk_Xstdmean = mean(V52)
, fBodyAccJerk_Ystdmean = mean(V53)
, fBodyAccJerk_Zstdmean = mean(V54)
, fBodyGyro_Xmean = mean(V55)
, fBodyGyro_Ymean = mean(V56)
, fBodyGyro_Zmean = mean(V57)
, fBodyGyro_Xstdmean = mean(V58)
, fBodyGyro_Ystdmean = mean(V59)
, fBodyGyro_Zstdmean = mean(V60)
, fBodyAccMag_mean =mean(V61)
, fBodyAccMag_stdmean =mean(V62)
, fBodyBodyAccJerkMag_mean =mean(V63)
, fBodyBodyAccJerkMag_stdmean =mean(V64)
, fBodyBodyGyroMag_mean =mean(V65)
, fBodyBodyGyroMag_stdmean =mean(V66)
, fBodyBodyGyroJerkMag_mean =mean(V67)
, fBodyBodyGyroJerkMag_stdmean =mean(V68)
),
by=.(activity,subject) ]
summarydata <- DT[,    .(BodyAcc_Xmean =mean(V3)
, BodyAcc_Ymean =mean(V4)
, BodyAcc_Zmean =mean(V5)
, BodyAcc_Xstdmean =mean(V6)
, BodyAcc_Ystdmean =mean(V7)
, BodyAcc_Zstdmean =mean(V8)
, GravityAcc_Xmean =mean(V9)
, GravityAcc_Ymean =mean(V10)
, GravityAcc_Zmean =mean(V11)
, GravityAcc_Xstdmean =mean(V12)
, GravityAcc_Ystdmean =mean(V13)
, GravityAcc_Zstdmean =mean(V14)
, BodyAccJerk_Xmean =mean(V15)
, BodyAccJerk_Ymean =mean(V16)
, BodyAccJerk_Zmean =mean(V17)
, BodyAccJerk_Xstdmean =mean(V18)
, BodyAccJerk_Ystdmean =mean(V19)
, BodyAccJerk_Zstdmean =mean(V20)
, BodyGyro_Xmean =mean(V21)
, BodyGyro_Ymean =mean(V22)
, BodyGyro_Zmean =mean(V23)
, BodyGyro_Xstdmean =mean(V24)
, BodyGyro_Ystdmean =mean(V25)
, BodyGyro_Zstdmean =mean(V26)
, BodyGyroJerk_Xmean =mean(V27)
, BodyGyroJerk_Ymean =mean(V28)
, BodyGyroJerk_Zmean =mean(V29)
, BodyGyroJerk_Xstdmean =mean(V30)
, BodyGyroJerk_Ystdmean =mean(V31)
, BodyGyroJerk_Zstdmean =mean(V32)
, BodyAccMag_mean =mean(V33)
, BodyAccMag_stdmean =mean(V34)
, GravityAccMag_mean =mean(V35)
, GravityAccMag_stdmean =mean(V36)
, BodyAccJerkMag_mean =mean(V37)
, BodyAccJerkMag_stdmean =mean(V38)
, BodyGyroMag_mean =mean(V39)
, BodyGyroMag_stdmean =mean(V40)
, BodyGyroJerkMag_mean =mean(V41)
, BodyGyroJerkMag_stdmean =mean(V42)
, fBodyAcc_Xmean =mean(V43)
, fBodyAcc_Ymean =mean(V44)
, fBodyAcc_Zmean =mean(V45)
, fBodyAcc_Xstdmean =mean(V46)
, fBodyAcc_Ystdmean =mean(V47)
, fBodyAcc_Zstdmean =mean(V48)
, fBodyAccJerk_Xmean =mean(V49)
, fBodyAccJerk_Ymean =mean(V50)
, fBodyAccJerk_Zmean =mean(V51)
, fBodyAccJerk_Xstdmean = mean(V52)
, fBodyAccJerk_Ystdmean = mean(V53)
, fBodyAccJerk_Zstdmean = mean(V54)
, fBodyGyro_Xmean = mean(V55)
, fBodyGyro_Ymean = mean(V56)
, fBodyGyro_Zmean = mean(V57)
, fBodyGyro_Xstdmean = mean(V58)
, fBodyGyro_Ystdmean = mean(V59)
, fBodyGyro_Zstdmean = mean(V60)
, fBodyAccMag_mean =mean(V61)
, fBodyAccMag_stdmean =mean(V62)
, fBodyBodyAccJerkMag_mean =mean(V63)
, fBodyBodyAccJerkMag_stdmean =mean(V64)
, fBodyBodyGyroMag_mean =mean(V65)
, fBodyBodyGyroMag_stdmean =mean(V66)
, fBodyBodyGyroJerkMag_mean =mean(V67)
, fBodyBodyGyroJerkMag_stdmean =mean(V68)
),
by=.(activity,subject) ]
View(summarydata)
write.table(summarydata, file = pasted(wd, output,"UCI_Mean_Summary.txt", sep=""), row.names = FALSE )
write.table(summarydata, file = paste(wd, output,"UCI_Mean_Summary.txt", sep=""), row.names = FALSE )
output <- "/Datascience/data/"
write.table(summarydata, file = paste(wd, output,"UCI_Mean_Summary.txt", sep=""), row.names = FALSE )
source('~/DataScience/data/run_analysis.R')
source('~/DataScience/data/run_analysis.R')
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
getwd()
download.file(con, destfile= "./Datascience/data/Fss06hid.csv")
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(con, destfile= "./Datascience/data/Fss06hid.csv")
data <- read.csv("./Datascience/data/Fss06hid.csv")
head(data)
names(data)
data($AGS)
data(data$AGS)
data[data$AGS]
data[$AGS]
data[,"AGS"]
data[,"ACR","AGS"]
data[,"ACR"]
data[data$AGS > 6,]
data[data$AGS == 6,]
data[data$AGS == 6 & data$ACR == 3,]
data[which(data$AGS == 6 & data$ACR == 3),]
head(data[which(data$AGS == 6 & data$ACR == 3),],3)
jtleek <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(jtleek, destfile= "./Datascience/data/jeff.jpg")
close.connection()
close.connection(jtleek)
jeff <- jpeg(filename = "./Datascience/data/jeff.jpg")
jeff <- readJPEG(filename = "./Datascience/data/jeff.jpg")
library(readJPEG)
library(JPEG)
install.packages("jpeg")
library(jpeg)
jeff <- readJPEG(filename = "./Datascience/data/jeff.jpg")
jeff <- readJPEG("./Datascience/data/jeff.jpg")
download.file(jtleek, destfile= "./Datascience/data/jeff.jpg",curl, mode="wb")
download.file(jtleek, destfile= "./Datascience/data/jeff.jpg","curl", mode="wb")
download.file(jtleek, destfile= "./Datascience/data/jeff.jpg", mode="wb")
jeff <- readJPEG("./Datascience/data/jeff.jpg")
quantile (jeff)
quantile (jeff, probs = seq(30,80))
jeff <- readJPEG("./Datascience/data/jeff.jpg", native=TRUE)
quantile (jeff)
quantile (jeff, probs = seq(30,80))
quantile (jeff, probs = c(30,80))
quantile (jeff, probs = c(30,80)/100)
GDPfile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
EDfile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(GDPfile, destfile= "./Datascience/data/GDP.csv")
download.file(EDfile, destfile= "./Datascience/data/ED.csv")
GDP <-read.csv("./Datascience/data/GDP.csv")
ED <- read.csv("./Datascience/data/ED.csv")
head(ED)
head(GDP)
head(ED,2)
names(ED)
head(ED[,2],2)
head(ED[,1],2)
head(GDP[,1],2)
mergedData = merge(GDP, ED, by.x="X", by.y="CountryCode",all=TRUE)
mergedData = merge(GDP, ED, by.x="X", by.y="CountryCode")
mergedData = merge(ED, GDP, by.x="CountryCode", by.y="X")
mergedData = merge(ED, GDP, by.x="CountryCode", by.y="X", all=TRUE)
mergedData = merge(GDP, ED, by.x="X", by.y="CountryCode")
dim(mergedData)
head(mergedData, 6)
View(ED)
View(GDP)
complete.cases(GDP)
GDP[Which(GDP$X != "")]
GDP[Which(GDP$X = "ABW")]
GDP[Which(GDP$X == "ABW")]
GDP[which(GDP$X == "ABW")]
GDP[which(GDP$X == "ABW"),]
GDP[which(GDP$X != "ABW"),]
GDP[which(GDP$X != NA),]
GDP[which(is.na(GDP$X)== FALSE),]
GDP <-read.table("./Datascience/data/GDP.csv",header=FALSE, sep=",", blank.lines.skip=TRUE)
GDP
View(GDP)
GDP <-read.csv("./Datascience/data/GDP2.csv")
GDP <-read.csv("./Datascience/data/GDP2.csv", header=FALSE)
mergedData = merge(GDP, ED, by.x="V1", by.y="CountryCode",all=TRUE)
mergedData = merge(GDP, ED, by.x="V1", by.y="CountryCode")
mergedData = merge(GDP, ED, by.x="V1", by.y="CountryCode",all=TRUE)
GDP <-read.csv("./Datascience/data/GDP2.csv", header=FALSE)
mergedData = merge(GDP, ED, by.x="V1", by.y="CountryCode",all=TRUE)
GDP <-read.csv("./Datascience/data/GDP2.csv", header=FALSE)
mergedData = merge(GDP, ED, by.x="V1", by.y="CountryCode")
GDP <-read.csv("./Datascience/data/GDP2.csv", header=FALSE)
mergedData = merge(GDP, ED, by.x="V1", by.y="CountryCode")
sort(mergedData$V1, decreasing= TRUE)
sort(mergedData$V2, decreasing= TRUE)
mergedData[sort(mergedData$V2, decreasing= TRUE), "V1"]
View(GDP)
mergedData[sort(mergedData$V2, decreasing= FALSE), "V1"]
mergedData[sort(mergedData$V2, decreasing= FALSE), "V2"]
mergedData[sort(mergedData$V2, decreasing= FALSE), 1]
mergedData[sort(mergedData$V2), 1]
mergedData[order(mergedData$V2), 1]
mergedData[order(mergedData$V2), 2]
mergedData[order(mergedData$V2, decreasing=TRUE), 1]
mean(mergedData$V2)
table(mergedData$Income.Group %in% "High income: nonOECD")
mergedData[mergedData$Income.Group %in% "High income: nonOECD",2]
mean(mergedData[mergedData$Income.Group %in% "High income: nonOECD",2])
c(mean(mergedData[mergedData$Income.Group %in% "High income: nonOECD",2]), mean(mergedData[mergedData$Income.Group %in% "High income: OECD",2]))
c(mean(mergedData[mergedData$Income.Group %in% "High income: OECD",2]), mean(mergedData[mergedData$Income.Group %in% "High income: nonOECD",2]))
quantile(mergedData$V2, na.rm=TRUE)
table(quantile(mergedData$V2, na.rm=TRUE),mergedData$Income.Group)
table(mergedData$Income.Group)
View(mergedData)
quantile(mergedData$V2, na.rm=TRUE)
table(mergedData$V2 < 38,mergedData$Income.Group)
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(con, destfile= "./Datascience/data/Fss06hid.csv")
data <- read.csv("./Datascience/data/Fss06hid.csv")
data$wgtp
data
head(wgtp)
head(data)
strsplit(names(data),"wgtp")[[123]]
gsub(",","","1,000")
as.number(gsub(",","","1,000"))
as.numeric(gsub(",","","1,000"))
nocommas <- function(x){gsub(",","",x)}
nocommas("1,000")
nocommas <- function(x){as.numeric(gsub(",","",x))}
nocommas("1,000")
sapply(c("1,000", "2,000"), nocommas)
GDP
GDP <-read.csv("./Datascience/data/GDP.csv", header=FALSE)
GDP[,"V5"]
GDP <-read.csv("./Datascience/data/GDP2.csv", header=FALSE)
GDP[,"V5"]
sapply(GDP[,"V5"], nocommas)
mean(sapply(GDP[,"V5"], nocommas))
View(GDP)
grep("^United", GDP[,"V4"])
grep("United$", GDP[,"V4"])
ED <- read.csv("./Datascience/data/ED.csv")
mergedData = merge(GDP, ED, by.x="X", by.y="CountryCode",all=TRUE)
mergedData = merge(GDP, ED, by.x="V1", by.y="CountryCode",all=TRUE)
View(mergedData)
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(con, destfile= "./Datascience/data/FEDSTATS_Country.csv")
FEDSTATS <- read.csv("./Datascience/data/FEDSTATS_Country.csv")
View(FEDSTATS)
mergedData = merge(GDP, FEDSTATS, by.x="V1", by.y="CountryCode",all=TRUE)
View(mergedData)
grep("Fiscal", mergedData$Special.Notes)
grep("[Ff]iscal", mergedData$Special.Notes)
mergedData$Special.Notes[,grep("[Ff]iscal", mergedData$Special.Notes)]
mergedData$Special.Notes[grep("[Ff]iscal", mergedData$Special.Notes)]
mergedData$Special.Notes[grep("[Ff]iscal+[Jj]une", mergedData$Special.Notes)]
mergedData$Special.Notes[grep("[Jj]une", mergedData$Special.Notes)]
mergedData$Special.Notes[grep("[Ff]iscal+.*June", mergedData$Special.Notes)]
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
index(amzn)
sampleTimes <- index(amzn)
sampleTimes
class(sampleTimes)
sampleTime(,1)
sampleTimes(,1)
sampleTimes[1,]
sampleTimes[1]
year(sampleTimes)
format(sampleTimes,%Y)
format(sampleTimes,format=%Y)
format(sampleTimes,format="%Y")
format(sampleTimes,format="%Y")="2012"
format(sampleTimes,format="%Y")=="2012"
sampleTimes[,format(sampleTimes,format="%Y")=="2012"]
sampleTimes[format(sampleTimes,format="%Y")=="2012"]
length(sampleTimes[format(sampleTimes,format="%Y")=="2012"])
timeseries <-sampleTimes[format(sampleTimes,format="%Y")=="2012"]
weekday(timeseries)
weekdays(timeseries)
weekdays(timeseries)=="Monday"
weekdays[weekdays(timeseries)=="Monday"]
timeseries[weekdays(timeseries)=="Monday"]
length(timeseries[weekdays(timeseries)=="Monday"])
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("ggplot2")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
View(airquality)
?qplot
??qplot
qplot()
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("qplot")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
g <- ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
wd <- dirname(parent.frame(2)$ofile)
setwd(wd)
data <- read.csv("activity.csv")
library(sqldf)
dailysteps <- sqldf("select sum(steps) as steps, date
from data
group by date
")
hist(dailysteps$steps)
mean(dailysteps$steps, na.rm=TRUE)
median(dailysteps$steps, na.rm=TRUE)
avgintervalsteps <-sqldf("select avg(steps) as steps, interval
from data
group by interval
")
data$missing <- is.na(data$steps)
imputeddata <- sqldf("select data.steps,
data.date,
data.interval,
data.missing,
avgintervalsteps.steps as avgsteps
from data
left join
avgintervalsteps on data.interval = avgintervalsteps.interval")
for (i in 1:length(imputeddata$missing)) {
if (imputeddata$missing[i] == TRUE) {imputeddata$newsteps[i] <- imputeddata$avgsteps[i]}
else
{imputeddata$newsteps[i] <- imputeddata$steps[i]}
}
dailysteps2 <- sqldf("select sum(newsteps) as steps, date
from imputeddata
group by date
")
hist(dailysteps2$steps)
mean(dailysteps2$steps, na.rm=TRUE)
median(dailysteps2$steps, na.rm=TRUE)
for (i in 1:length(imputeddata$date)) {
if ((weekdays(as.POSIXct(imputeddata$date[i])) == "Sunday")
| (weekdays(as.POSIXct(imputeddata$date[i])) == "Saturday"))
{imputeddata$weekday[i] <- "Weekend"}
else
{imputeddata$weekday[i] <- "Weekday"}
}
imputeddata$weekday<- as.factor(imputeddata$weekday)
avgintervalsteps2 <-sqldf("select avg(newsteps) as steps, interval, weekday
from imputeddata
group by interval, weekday
")
library(lattice)
xyplot(avgintervalsteps2$steps ~ avgintervalsteps2$interval | avgintervalsteps2$weekday, layout = c(1,2))
source('~/GitHub/RepData_PeerAssessment1/PA1_code.r')
library(lattice)
xyplot(avgintervalsteps2$steps ~ avgintervalsteps2$interval | avgintervalsteps2$weekday, layout = c(1,2))
stripplot(avgintervalsteps2$steps ~ avgintervalsteps2$interval | avgintervalsteps2$weekday, layout = c(1,2))
xyplot(avgintervalsteps2$steps ~ avgintervalsteps2$interval | avgintervalsteps2$weekday,
layout = c(1,2), type = "1")
xyplot(avgintervalsteps2$steps ~ avgintervalsteps2$interval | avgintervalsteps2$weekday,
layout = c(1,2), type = "l")
source('~/GitHub/RepData_PeerAssessment1/PA1_code.r')
